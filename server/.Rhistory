# library(formatR)
# opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/jonat/Downloads/ngs-master (3)/ngs-master/pillcheck_pgx/forAhmedAndJonathan/data/")
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, message=FALSE,  class.output="shadebox")
params<- list(
Barcode_summary_path = "GalenvsPGx_Thermo_v2_Samples_1_to_14_torrent-server_67.bc_summary.xls",
Amplicon_summary_path = "GalenvsPGx_Thermo_v2_Samples_1_to_14_torrent-server_67.bcmatrix.xls",
depth_files_folder_path = "depth/"
)
# Import Barcode Summary File
bsf <- read_delim(params$Barcode_summary_path)
# Import Depth Files
files_to_read <- list.files(path = params$depth_files_folder_path, pattern = "\\.tsv$", full.names = T)
all_files <- lapply(files_to_read, function(x) {
read.table(file = x, sep = '\t', header = TRUE)
})
names(all_files) <- files_to_read %>% gsub(".*//", "", .)
# Import Amplicon Summary File
amplicon <- read_delim(params$Amplicon_summary_path)
files2 <-
all_files %>%
lapply(function(x)
cbind(x, len = x$contig_end - x$contig_srt + 1)) %>%
lapply(function(x)
cbind(x, rat500 = x$cov500x/x$len)) %>%
lapply(function(x)
cbind(x, rat2500 = x$cov2500x/x$len))
filesBind <- bind_rows(files2, .id="file")
summaryTibble <- bsf %>% dplyr::select(`Barcode ID`, `Sample Name`, `Mean Depth`, `Uniformity`)
# Pass / Fail on Mean Depth
summaryTibble$`Depth QC Check` <- "FAIL"
summaryTibble$`Depth QC Check`[summaryTibble$ `Mean Depth` > 2500] <- "PASS"
# Which regions fail (amplicons that have less than 500X by sample)
baseDepthLess500 <- lapply(files2, function(x) filter(x, rat500 <1)) %>% lapply(function(x) select(x, region_id))
# Pass / Fail on Mean Depth
summaryTibble$`Uniformity QC Check` <- "FAIL"
summaryTibble$`Uniformity QC Check`[summaryTibble$ `Uniformity` > 93] <- "ACCEPTABLE"
summaryTibble$`Uniformity QC Check`[summaryTibble$ `Uniformity` > 96] <- "OPTIMAL"
longAmplicon <- amplicon %>% pivot_longer(cols = 3:ncol(amplicon))
coverageFreq <- longAmplicon %>%
filter(value<500) %>%
dplyr::select(name) %>%
table() %>%
`/` (nrow(amplicon)) %>%
as.data.frame()
colnames(coverageFreq)[1] <- "Barcode ID"
coverageFreq$`Coverage QC Check` <- "FAIL"
coverageFreq$`Coverage QC Check`[coverageFreq$Freq < 0.05] <- "PASS"
summaryTibble <- summaryTibble %>% full_join(coverageFreq[,c(1,3)])
summaryTibble <- summaryTibble %>% mutate(`Overall QC Checkpoint` = if_else(`Depth QC Check` == "PASS" & `Uniformity QC Check` == "ACCEPTABLE" | `Uniformity QC Check` == "ACCEPTABLE" & `Coverage QC Check` == "PASS", "PASS", "FAIL"))
summaryColours <- summaryTibble$`Overall QC Checkpoint` %>% gsub("PASS", "olive", .) %>% gsub("FAIL", "red", .)
summaryTibble %>%
dplyr::select(`Barcode ID`, `Sample Name`, `Depth QC Check`, `Uniformity QC Check`, `Coverage QC Check`, `Overall QC Checkpoint`) %>%
sapply(function(x){str_wrap(x, 10)}) %>%
kbl(booktabs=TRUE, longtable=TRUE, caption = "Summary of QC check results.")  %>%
column_spec(1:6, width = paste0(c(2,2,1.6,3,1.6,1), "cm")) %>%
column_spec(6, color=summaryColours)
summaryTibble %>%
dplyr::select(`Barcode ID`, `Sample Name`, `Mean Depth`, `Depth QC Check`) %>%
kbl(booktabs=TRUE, longtable=TRUE, caption = "Mean Depth Results.")
wideFiles <- filesBind %>% select(file, region_id, rat500) %>% pivot_wider(names_from = file, values_from = rat500) %>% as.data.frame()
rownames(wideFiles) <- wideFiles$region_id
wideMatrix <- wideFiles[,2:ncol(wideFiles)] %>% as.matrix
wideMatrix %>% heatmap.2(col=turbo,trace="none", labRow = "")
baseDepthLess500 %>% lapply(function(x){as.vector(x)})
baseDepthLess500 %>% lapply(function(x){as.vector(x)}) %>% unlist() %>% unique()
halfSamples <- length(baseDepthLess500) /2
depthFlagOverall <- baseDepthLess500 %>% lapply(function(x){as.vector(x)}) %>% unlist() %>% table()
depthFlagIntersectHalf <- depthFlagOverall[depthFlagOverall > halfSamples] %>% names()
depthFlagIntersectHalf
summaryTibble %>% full_join(coverageFreq) %>%
dplyr::select(`Barcode ID`, `Sample Name`, `Freq`, `Coverage QC Check`) %>%
kbl(booktabs=TRUE, longtable=TRUE,   caption = "Coverage Frequency Results. `Freq` is the fraction of amplicons that are not covered at least 500X.")
ampMatrix <- amplicon[3:ncol(amplicon)] %>% as.matrix()
rownames(ampMatrix) <- amplicon$Target
ampMatrix  %>% heatmap.2(col=turbo,trace="none", labRow = "")
amplicon2 <- amplicon
amplicon2[,3:ncol(amplicon2)] <- amplicon[,3:ncol(amplicon)] > 500
amplicon2[,3:ncol(amplicon2)] <- amplicon2[,3:ncol(amplicon2)] %>% sapply(function(x){as.integer(x)})
amplicon2$rowSums <- rowSums(amplicon2[,3:ncol(amplicon2)])
amplicon2 %>% dplyr::filter(rowSums<halfSamples) %>% dplyr::select(Target) %>% as.vector()
summaryTibble %>%
dplyr::select(`Barcode ID`, `Sample Name`, `Uniformity`, `Uniformity QC Check`)  %>%
kbl(booktabs=TRUE, longtable=TRUE, caption = "Uniformity Results.")
library(rmarkdown)
# Extract Rmd content from code chunk
rmd_content <- knitr::read_chunk("```{r data import}")[[1]]
knitr::opts_chunk$set(echo = TRUE)
options(tinytex.verbose = TRUE)
library(tidyverse)
library(ggpubr)
library(knitr)
library(kableExtra)
library(scales)
library(viridis)
library(xtable)
library(purrr)
library(gplots)
#qiacuityData <- "~/Documents/galenvs/cfDNA/qiacuity/data/2023-04-13"
# library(formatR)
# opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/jonat/Downloads/ngs-master (3)/ngs-master/pillcheck_pgx/forAhmedAndJonathan/data/")
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, message=FALSE,  class.output="shadebox")
params<- list(
Barcode_summary_path = "GalenvsPGx_Thermo_v2_Samples_1_to_14_torrent-server_67.bc_summary.xls",
Amplicon_summary_path = "GalenvsPGx_Thermo_v2_Samples_1_to_14_torrent-server_67.bcmatrix.xls",
depth_files_folder_path = "depth/"
)
# Import Barcode Summary File
bsf <- read_delim(params$Barcode_summary_path)
# Import Depth Files
files_to_read <- list.files(path = params$depth_files_folder_path, pattern = "\\.tsv$", full.names = T)
all_files <- lapply(files_to_read, function(x) {
read.table(file = x, sep = '\t', header = TRUE)
})
names(all_files) <- files_to_read %>% gsub(".*//", "", .)
# Import Amplicon Summary File
amplicon <- read_delim(params$Amplicon_summary_path)
files2 <-
all_files %>%
lapply(function(x)
cbind(x, len = x$contig_end - x$contig_srt + 1)) %>%
lapply(function(x)
cbind(x, rat500 = x$cov500x/x$len)) %>%
lapply(function(x)
cbind(x, rat2500 = x$cov2500x/x$len))
filesBind <- bind_rows(files2, .id="file")
summaryTibble <- bsf %>% dplyr::select(`Barcode ID`, `Sample Name`, `Mean Depth`, `Uniformity`)
# Pass / Fail on Mean Depth
summaryTibble$`Depth QC Check` <- "FAIL"
summaryTibble$`Depth QC Check`[summaryTibble$ `Mean Depth` > 2500] <- "PASS"
# Which regions fail (amplicons that have less than 500X by sample)
baseDepthLess500 <- lapply(files2, function(x) filter(x, rat500 <1)) %>% lapply(function(x) select(x, region_id))
# Pass / Fail on Mean Depth
summaryTibble$`Uniformity QC Check` <- "FAIL"
summaryTibble$`Uniformity QC Check`[summaryTibble$ `Uniformity` > 93] <- "ACCEPTABLE"
summaryTibble$`Uniformity QC Check`[summaryTibble$ `Uniformity` > 96] <- "OPTIMAL"
longAmplicon <- amplicon %>% pivot_longer(cols = 3:ncol(amplicon))
coverageFreq <- longAmplicon %>%
filter(value<500) %>%
dplyr::select(name) %>%
table() %>%
`/` (nrow(amplicon)) %>%
as.data.frame()
colnames(coverageFreq)[1] <- "Barcode ID"
coverageFreq$`Coverage QC Check` <- "FAIL"
coverageFreq$`Coverage QC Check`[coverageFreq$Freq < 0.05] <- "PASS"
summaryTibble <- summaryTibble %>% full_join(coverageFreq[,c(1,3)])
summaryTibble <- summaryTibble %>% mutate(`Overall QC Checkpoint` = if_else(`Depth QC Check` == "PASS" & `Uniformity QC Check` == "ACCEPTABLE" | `Uniformity QC Check` == "ACCEPTABLE" & `Coverage QC Check` == "PASS", "PASS", "FAIL"))
summaryColours <- summaryTibble$`Overall QC Checkpoint` %>% gsub("PASS", "olive", .) %>% gsub("FAIL", "red", .)
summaryTibble %>%
dplyr::select(`Barcode ID`, `Sample Name`, `Depth QC Check`, `Uniformity QC Check`, `Coverage QC Check`, `Overall QC Checkpoint`) %>%
sapply(function(x){str_wrap(x, 10)}) %>%
kbl(booktabs=TRUE, longtable=TRUE, caption = "Summary of QC check results.")  %>%
column_spec(1:6, width = paste0(c(2,2,1.6,3,1.6,1), "cm")) %>%
column_spec(6, color=summaryColours)
summaryTibble %>%
dplyr::select(`Barcode ID`, `Sample Name`, `Mean Depth`, `Depth QC Check`) %>%
kbl(booktabs=TRUE, longtable=TRUE, caption = "Mean Depth Results.")
wideFiles <- filesBind %>% select(file, region_id, rat500) %>% pivot_wider(names_from = file, values_from = rat500) %>% as.data.frame()
rownames(wideFiles) <- wideFiles$region_id
wideMatrix <- wideFiles[,2:ncol(wideFiles)] %>% as.matrix
wideMatrix %>% heatmap.2(col=turbo,trace="none", labRow = "")
baseDepthLess500 %>% lapply(function(x){as.vector(x)})
baseDepthLess500 %>% lapply(function(x){as.vector(x)}) %>% unlist() %>% unique()
halfSamples <- length(baseDepthLess500) /2
depthFlagOverall <- baseDepthLess500 %>% lapply(function(x){as.vector(x)}) %>% unlist() %>% table()
depthFlagIntersectHalf <- depthFlagOverall[depthFlagOverall > halfSamples] %>% names()
depthFlagIntersectHalf
summaryTibble %>% full_join(coverageFreq) %>%
dplyr::select(`Barcode ID`, `Sample Name`, `Freq`, `Coverage QC Check`) %>%
kbl(booktabs=TRUE, longtable=TRUE,   caption = "Coverage Frequency Results. `Freq` is the fraction of amplicons that are not covered at least 500X.")
ampMatrix <- amplicon[3:ncol(amplicon)] %>% as.matrix()
rownames(ampMatrix) <- amplicon$Target
ampMatrix  %>% heatmap.2(col=turbo,trace="none", labRow = "")
amplicon2 <- amplicon
amplicon2[,3:ncol(amplicon2)] <- amplicon[,3:ncol(amplicon)] > 500
amplicon2[,3:ncol(amplicon2)] <- amplicon2[,3:ncol(amplicon2)] %>% sapply(function(x){as.integer(x)})
amplicon2$rowSums <- rowSums(amplicon2[,3:ncol(amplicon2)])
amplicon2 %>% dplyr::filter(rowSums<halfSamples) %>% dplyr::select(Target) %>% as.vector()
summaryTibble %>%
dplyr::select(`Barcode ID`, `Sample Name`, `Uniformity`, `Uniformity QC Check`)  %>%
kbl(booktabs=TRUE, longtable=TRUE, caption = "Uniformity Results.")
library(rmarkdown)
# Extract Rmd content from code chunk
rmd_content <- knitr::read_chunk("```{r data import}")[[1]]
knitr::opts_chunk$set(echo = TRUE)
options(tinytex.verbose = TRUE)
library(tidyverse)
library(ggpubr)
library(knitr)
library(kableExtra)
library(scales)
library(viridis)
library(xtable)
library(purrr)
library(gplots)
#qiacuityData <- "~/Documents/galenvs/cfDNA/qiacuity/data/2023-04-13"
# library(formatR)
# opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/jonat/Downloads/ngs-master (3)/ngs-master/pillcheck_pgx/forAhmedAndJonathan/data/")
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, message=FALSE,  class.output="shadebox")
params<- list(
Barcode_summary_path = "GalenvsPGx_Thermo_v2_Samples_1_to_14_torrent-server_67.bc_summary.xls",
Amplicon_summary_path = "GalenvsPGx_Thermo_v2_Samples_1_to_14_torrent-server_67.bcmatrix.xls",
depth_files_folder_path = "depth/"
)
# Import Barcode Summary File
bsf <- read_delim(params$Barcode_summary_path)
# Import Depth Files
files_to_read <- list.files(path = params$depth_files_folder_path, pattern = "\\.tsv$", full.names = T)
all_files <- lapply(files_to_read, function(x) {
read.table(file = x, sep = '\t', header = TRUE)
})
names(all_files) <- files_to_read %>% gsub(".*//", "", .)
# Import Amplicon Summary File
amplicon <- read_delim(params$Amplicon_summary_path)
files2 <-
all_files %>%
lapply(function(x)
cbind(x, len = x$contig_end - x$contig_srt + 1)) %>%
lapply(function(x)
cbind(x, rat500 = x$cov500x/x$len)) %>%
lapply(function(x)
cbind(x, rat2500 = x$cov2500x/x$len))
filesBind <- bind_rows(files2, .id="file")
summaryTibble <- bsf %>% dplyr::select(`Barcode ID`, `Sample Name`, `Mean Depth`, `Uniformity`)
# Pass / Fail on Mean Depth
summaryTibble$`Depth QC Check` <- "FAIL"
summaryTibble$`Depth QC Check`[summaryTibble$ `Mean Depth` > 2500] <- "PASS"
# Which regions fail (amplicons that have less than 500X by sample)
baseDepthLess500 <- lapply(files2, function(x) filter(x, rat500 <1)) %>% lapply(function(x) select(x, region_id))
# Pass / Fail on Mean Depth
summaryTibble$`Uniformity QC Check` <- "FAIL"
summaryTibble$`Uniformity QC Check`[summaryTibble$ `Uniformity` > 93] <- "ACCEPTABLE"
summaryTibble$`Uniformity QC Check`[summaryTibble$ `Uniformity` > 96] <- "OPTIMAL"
longAmplicon <- amplicon %>% pivot_longer(cols = 3:ncol(amplicon))
coverageFreq <- longAmplicon %>%
filter(value<500) %>%
dplyr::select(name) %>%
table() %>%
`/` (nrow(amplicon)) %>%
as.data.frame()
colnames(coverageFreq)[1] <- "Barcode ID"
coverageFreq$`Coverage QC Check` <- "FAIL"
coverageFreq$`Coverage QC Check`[coverageFreq$Freq < 0.05] <- "PASS"
summaryTibble <- summaryTibble %>% full_join(coverageFreq[,c(1,3)])
summaryTibble <- summaryTibble %>% mutate(`Overall QC Checkpoint` = if_else(`Depth QC Check` == "PASS" & `Uniformity QC Check` == "ACCEPTABLE" | `Uniformity QC Check` == "ACCEPTABLE" & `Coverage QC Check` == "PASS", "PASS", "FAIL"))
summaryColours <- summaryTibble$`Overall QC Checkpoint` %>% gsub("PASS", "olive", .) %>% gsub("FAIL", "red", .)
summaryTibble %>%
dplyr::select(`Barcode ID`, `Sample Name`, `Depth QC Check`, `Uniformity QC Check`, `Coverage QC Check`, `Overall QC Checkpoint`) %>%
sapply(function(x){str_wrap(x, 10)}) %>%
kbl(booktabs=TRUE, longtable=TRUE, caption = "Summary of QC check results.")  %>%
column_spec(1:6, width = paste0(c(2,2,1.6,3,1.6,1), "cm")) %>%
column_spec(6, color=summaryColours)
summaryTibble %>%
dplyr::select(`Barcode ID`, `Sample Name`, `Mean Depth`, `Depth QC Check`) %>%
kbl(booktabs=TRUE, longtable=TRUE, caption = "Mean Depth Results.")
wideFiles <- filesBind %>% select(file, region_id, rat500) %>% pivot_wider(names_from = file, values_from = rat500) %>% as.data.frame()
rownames(wideFiles) <- wideFiles$region_id
wideMatrix <- wideFiles[,2:ncol(wideFiles)] %>% as.matrix
wideMatrix %>% heatmap.2(col=turbo,trace="none", labRow = "")
baseDepthLess500 %>% lapply(function(x){as.vector(x)})
baseDepthLess500 %>% lapply(function(x){as.vector(x)}) %>% unlist() %>% unique()
halfSamples <- length(baseDepthLess500) /2
depthFlagOverall <- baseDepthLess500 %>% lapply(function(x){as.vector(x)}) %>% unlist() %>% table()
depthFlagIntersectHalf <- depthFlagOverall[depthFlagOverall > halfSamples] %>% names()
depthFlagIntersectHalf
summaryTibble %>% full_join(coverageFreq) %>%
dplyr::select(`Barcode ID`, `Sample Name`, `Freq`, `Coverage QC Check`) %>%
kbl(booktabs=TRUE, longtable=TRUE,   caption = "Coverage Frequency Results. `Freq` is the fraction of amplicons that are not covered at least 500X.")
ampMatrix <- amplicon[3:ncol(amplicon)] %>% as.matrix()
rownames(ampMatrix) <- amplicon$Target
ampMatrix  %>% heatmap.2(col=turbo,trace="none", labRow = "")
amplicon2 <- amplicon
amplicon2[,3:ncol(amplicon2)] <- amplicon[,3:ncol(amplicon)] > 500
amplicon2[,3:ncol(amplicon2)] <- amplicon2[,3:ncol(amplicon2)] %>% sapply(function(x){as.integer(x)})
amplicon2$rowSums <- rowSums(amplicon2[,3:ncol(amplicon2)])
amplicon2 %>% dplyr::filter(rowSums<halfSamples) %>% dplyr::select(Target) %>% as.vector()
summaryTibble %>%
dplyr::select(`Barcode ID`, `Sample Name`, `Uniformity`, `Uniformity QC Check`)  %>%
kbl(booktabs=TRUE, longtable=TRUE, caption = "Uniformity Results.")
library(rmarkdown)
# Write Rmd string to temporary file
tmp <- tempfile(fileext = ".Rmd")
writeLines(knitr::read_chunk("pgx_qc.Rmd")[[1]], tmp)
library(rmarkdown)
rmarkdown::render("pgx_qc.Rmd", output_format = "pdf_document")
library(rmarkdown)
rmarkdown::render("pgx_qc.Rmd", output_format = "pdf_document")
knitr::opts_chunk$set(echo = TRUE)
options(tinytex.verbose = TRUE)
library(tidyverse)
library(ggpubr)
library(knitr)
library(kableExtra)
library(scales)
library(viridis)
library(xtable)
library(purrr)
library(gplots)
#qiacuityData <- "~/Documents/galenvs/cfDNA/qiacuity/data/2023-04-13"
# library(formatR)
# opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/jonat/Downloads/ngs-master (3)/ngs-master/pillcheck_pgx/forAhmedAndJonathan/data/")
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, message=FALSE,  class.output="shadebox")
params<- list(
Barcode_summary_path = "GalenvsPGx_Thermo_v2_Samples_1_to_14_torrent-server_67.bc_summary.xls",
Amplicon_summary_path = "GalenvsPGx_Thermo_v2_Samples_1_to_14_torrent-server_67.bcmatrix.xls",
depth_files_folder_path = "depth/"
)
# Import Barcode Summary File
bsf <- read_delim(params$Barcode_summary_path)
# Import Depth Files
files_to_read <- list.files(path = params$depth_files_folder_path, pattern = "\\.tsv$", full.names = T)
all_files <- lapply(files_to_read, function(x) {
read.table(file = x, sep = '\t', header = TRUE)
})
names(all_files) <- files_to_read %>% gsub(".*//", "", .)
# Import Amplicon Summary File
amplicon <- read_delim(params$Amplicon_summary_path)
files2 <-
all_files %>%
lapply(function(x)
cbind(x, len = x$contig_end - x$contig_srt + 1)) %>%
lapply(function(x)
cbind(x, rat500 = x$cov500x/x$len)) %>%
lapply(function(x)
cbind(x, rat2500 = x$cov2500x/x$len))
filesBind <- bind_rows(files2, .id="file")
summaryTibble <- bsf %>% dplyr::select(`Barcode ID`, `Sample Name`, `Mean Depth`, `Uniformity`)
# Pass / Fail on Mean Depth
summaryTibble$`Depth QC Check` <- "FAIL"
summaryTibble$`Depth QC Check`[summaryTibble$ `Mean Depth` > 2500] <- "PASS"
# Which regions fail (amplicons that have less than 500X by sample)
baseDepthLess500 <- lapply(files2, function(x) filter(x, rat500 <1)) %>% lapply(function(x) select(x, region_id))
# Pass / Fail on Mean Depth
summaryTibble$`Uniformity QC Check` <- "FAIL"
summaryTibble$`Uniformity QC Check`[summaryTibble$ `Uniformity` > 93] <- "ACCEPTABLE"
summaryTibble$`Uniformity QC Check`[summaryTibble$ `Uniformity` > 96] <- "OPTIMAL"
longAmplicon <- amplicon %>% pivot_longer(cols = 3:ncol(amplicon))
coverageFreq <- longAmplicon %>%
filter(value<500) %>%
dplyr::select(name) %>%
table() %>%
`/` (nrow(amplicon)) %>%
as.data.frame()
colnames(coverageFreq)[1] <- "Barcode ID"
coverageFreq$`Coverage QC Check` <- "FAIL"
coverageFreq$`Coverage QC Check`[coverageFreq$Freq < 0.05] <- "PASS"
summaryTibble <- summaryTibble %>% full_join(coverageFreq[,c(1,3)])
summaryTibble <- summaryTibble %>% mutate(`Overall QC Checkpoint` = if_else(`Depth QC Check` == "PASS" & `Uniformity QC Check` == "ACCEPTABLE" | `Uniformity QC Check` == "ACCEPTABLE" & `Coverage QC Check` == "PASS", "PASS", "FAIL"))
summaryColours <- summaryTibble$`Overall QC Checkpoint` %>% gsub("PASS", "olive", .) %>% gsub("FAIL", "red", .)
summaryTibble %>%
dplyr::select(`Barcode ID`, `Sample Name`, `Depth QC Check`, `Uniformity QC Check`, `Coverage QC Check`, `Overall QC Checkpoint`) %>%
sapply(function(x){str_wrap(x, 10)}) %>%
kbl(booktabs=TRUE, longtable=TRUE, caption = "Summary of QC check results.")  %>%
column_spec(1:6, width = paste0(c(2,2,1.6,3,1.6,1), "cm")) %>%
column_spec(6, color=summaryColours)
summaryTibble %>%
dplyr::select(`Barcode ID`, `Sample Name`, `Mean Depth`, `Depth QC Check`) %>%
kbl(booktabs=TRUE, longtable=TRUE, caption = "Mean Depth Results.")
wideFiles <- filesBind %>% select(file, region_id, rat500) %>% pivot_wider(names_from = file, values_from = rat500) %>% as.data.frame()
rownames(wideFiles) <- wideFiles$region_id
wideMatrix <- wideFiles[,2:ncol(wideFiles)] %>% as.matrix
wideMatrix %>% heatmap.2(col=turbo,trace="none", labRow = "")
baseDepthLess500 %>% lapply(function(x){as.vector(x)})
baseDepthLess500 %>% lapply(function(x){as.vector(x)}) %>% unlist() %>% unique()
halfSamples <- length(baseDepthLess500) /2
depthFlagOverall <- baseDepthLess500 %>% lapply(function(x){as.vector(x)}) %>% unlist() %>% table()
depthFlagIntersectHalf <- depthFlagOverall[depthFlagOverall > halfSamples] %>% names()
depthFlagIntersectHalf
summaryTibble %>% full_join(coverageFreq) %>%
dplyr::select(`Barcode ID`, `Sample Name`, `Freq`, `Coverage QC Check`) %>%
kbl(booktabs=TRUE, longtable=TRUE,   caption = "Coverage Frequency Results. `Freq` is the fraction of amplicons that are not covered at least 500X.")
ampMatrix <- amplicon[3:ncol(amplicon)] %>% as.matrix()
rownames(ampMatrix) <- amplicon$Target
ampMatrix  %>% heatmap.2(col=turbo,trace="none", labRow = "")
amplicon2 <- amplicon
amplicon2[,3:ncol(amplicon2)] <- amplicon[,3:ncol(amplicon)] > 500
amplicon2[,3:ncol(amplicon2)] <- amplicon2[,3:ncol(amplicon2)] %>% sapply(function(x){as.integer(x)})
amplicon2$rowSums <- rowSums(amplicon2[,3:ncol(amplicon2)])
amplicon2 %>% dplyr::filter(rowSums<halfSamples) %>% dplyr::select(Target) %>% as.vector()
summaryTibble %>%
dplyr::select(`Barcode ID`, `Sample Name`, `Uniformity`, `Uniformity QC Check`)  %>%
kbl(booktabs=TRUE, longtable=TRUE, caption = "Uniformity Results.")
library(rmarkdown)
rmarkdown::render("pgx_qc.Rmd", output_format = "pdf_document")
library(rmarkdown)
# Set working directory
setwd("C:/Users/jonat/Downloads/ngs-master (3)/ngs-master/pillcheck_pgx/forAhmedAndJonathan/pgx_qc.Rmd")
library(rmarkdown)
# Set working directory
setwd("C:/Users/jonat/Downloads/ngs-master (3)/ngs-master/pillcheck_pgx/forAhmedAndJonathan/")
# Render Rmd using relative path
rmarkdown::render("pgx_qc.Rmd", output_format = "pdf_document")
library(rmarkdown)
# Set working directory
setwd("C:/Users/jonat/Desktop/ngs_app_galenvs/server/")
# Render Rmd using relative path
rmarkdown::render("pgx_qc.Rmd", output_format = "pdf_document")
knitr::opts_chunk$set(echo = TRUE)
options(tinytex.verbose = TRUE)
library(tidyverse)
library(ggpubr)
library(knitr)
library(kableExtra)
library(scales)
library(viridis)
library(xtable)
library(purrr)
library(gplots)
#qiacuityData <- "~/Documents/galenvs/cfDNA/qiacuity/data/2023-04-13"
# library(formatR)
# opts_chunk$set(tidy.opts=list(width.cutoff=60),tidy=TRUE)
knitr::opts_knit$set(root.dir = "C:/Users/jonat/Downloads/ngs-master (3)/ngs-master/pillcheck_pgx/forAhmedAndJonathan/data/")
knitr::opts_chunk$set(echo = FALSE, warning=FALSE, message=FALSE,  class.output="shadebox")
params<- list(
Barcode_summary_path = "GalenvsPGx_Thermo_v2_Samples_1_to_14_torrent-server_67.bc_summary.xls",
Amplicon_summary_path = "GalenvsPGx_Thermo_v2_Samples_1_to_14_torrent-server_67.bcmatrix.xls",
depth_files_folder_path = "depth/"
)
# Import Barcode Summary File
bsf <- read_delim(params$Barcode_summary_path)
# Import Depth Files
files_to_read <- list.files(path = params$depth_files_folder_path, pattern = "\\.tsv$", full.names = T)
all_files <- lapply(files_to_read, function(x) {
read.table(file = x, sep = '\t', header = TRUE)
})
names(all_files) <- files_to_read %>% gsub(".*//", "", .)
# Import Amplicon Summary File
amplicon <- read_delim(params$Amplicon_summary_path)
files2 <-
all_files %>%
lapply(function(x)
cbind(x, len = x$contig_end - x$contig_srt + 1)) %>%
lapply(function(x)
cbind(x, rat500 = x$cov500x/x$len)) %>%
lapply(function(x)
cbind(x, rat2500 = x$cov2500x/x$len))
filesBind <- bind_rows(files2, .id="file")
summaryTibble <- bsf %>% dplyr::select(`Barcode ID`, `Sample Name`, `Mean Depth`, `Uniformity`)
# Pass / Fail on Mean Depth
summaryTibble$`Depth QC Check` <- "FAIL"
summaryTibble$`Depth QC Check`[summaryTibble$ `Mean Depth` > 2500] <- "PASS"
# Which regions fail (amplicons that have less than 500X by sample)
baseDepthLess500 <- lapply(files2, function(x) filter(x, rat500 <1)) %>% lapply(function(x) select(x, region_id))
# Pass / Fail on Mean Depth
summaryTibble$`Uniformity QC Check` <- "FAIL"
summaryTibble$`Uniformity QC Check`[summaryTibble$ `Uniformity` > 93] <- "ACCEPTABLE"
summaryTibble$`Uniformity QC Check`[summaryTibble$ `Uniformity` > 96] <- "OPTIMAL"
longAmplicon <- amplicon %>% pivot_longer(cols = 3:ncol(amplicon))
coverageFreq <- longAmplicon %>%
filter(value<500) %>%
dplyr::select(name) %>%
table() %>%
`/` (nrow(amplicon)) %>%
as.data.frame()
colnames(coverageFreq)[1] <- "Barcode ID"
coverageFreq$`Coverage QC Check` <- "FAIL"
coverageFreq$`Coverage QC Check`[coverageFreq$Freq < 0.05] <- "PASS"
summaryTibble <- summaryTibble %>% full_join(coverageFreq[,c(1,3)])
summaryTibble <- summaryTibble %>% mutate(`Overall QC Checkpoint` = if_else(`Depth QC Check` == "PASS" & `Uniformity QC Check` == "ACCEPTABLE" | `Uniformity QC Check` == "ACCEPTABLE" & `Coverage QC Check` == "PASS", "PASS", "FAIL"))
summaryColours <- summaryTibble$`Overall QC Checkpoint` %>% gsub("PASS", "olive", .) %>% gsub("FAIL", "red", .)
summaryTibble %>%
dplyr::select(`Barcode ID`, `Sample Name`, `Depth QC Check`, `Uniformity QC Check`, `Coverage QC Check`, `Overall QC Checkpoint`) %>%
sapply(function(x){str_wrap(x, 10)}) %>%
kbl(booktabs=TRUE, longtable=TRUE, caption = "Summary of QC check results.")  %>%
column_spec(1:6, width = paste0(c(2,2,1.6,3,1.6,1), "cm")) %>%
column_spec(6, color=summaryColours)
summaryTibble %>%
dplyr::select(`Barcode ID`, `Sample Name`, `Mean Depth`, `Depth QC Check`) %>%
kbl(booktabs=TRUE, longtable=TRUE, caption = "Mean Depth Results.")
wideFiles <- filesBind %>% select(file, region_id, rat500) %>% pivot_wider(names_from = file, values_from = rat500) %>% as.data.frame()
rownames(wideFiles) <- wideFiles$region_id
wideMatrix <- wideFiles[,2:ncol(wideFiles)] %>% as.matrix
wideMatrix %>% heatmap.2(col=turbo,trace="none", labRow = "")
baseDepthLess500 %>% lapply(function(x){as.vector(x)})
baseDepthLess500 %>% lapply(function(x){as.vector(x)}) %>% unlist() %>% unique()
halfSamples <- length(baseDepthLess500) /2
depthFlagOverall <- baseDepthLess500 %>% lapply(function(x){as.vector(x)}) %>% unlist() %>% table()
depthFlagIntersectHalf <- depthFlagOverall[depthFlagOverall > halfSamples] %>% names()
depthFlagIntersectHalf
summaryTibble %>% full_join(coverageFreq) %>%
dplyr::select(`Barcode ID`, `Sample Name`, `Freq`, `Coverage QC Check`) %>%
kbl(booktabs=TRUE, longtable=TRUE,   caption = "Coverage Frequency Results. `Freq` is the fraction of amplicons that are not covered at least 500X.")
ampMatrix <- amplicon[3:ncol(amplicon)] %>% as.matrix()
rownames(ampMatrix) <- amplicon$Target
ampMatrix  %>% heatmap.2(col=turbo,trace="none", labRow = "")
amplicon2 <- amplicon
amplicon2[,3:ncol(amplicon2)] <- amplicon[,3:ncol(amplicon)] > 500
amplicon2[,3:ncol(amplicon2)] <- amplicon2[,3:ncol(amplicon2)] %>% sapply(function(x){as.integer(x)})
amplicon2$rowSums <- rowSums(amplicon2[,3:ncol(amplicon2)])
amplicon2 %>% dplyr::filter(rowSums<halfSamples) %>% dplyr::select(Target) %>% as.vector()
summaryTibble %>%
dplyr::select(`Barcode ID`, `Sample Name`, `Uniformity`, `Uniformity QC Check`)  %>%
kbl(booktabs=TRUE, longtable=TRUE, caption = "Uniformity Results.")
library(rmarkdown)
# Set working directory
setwd("C:/Users/jonat/Desktop/ngs_app_galenvs/server/")
# Render Rmd using relative path
rmarkdown::render("pgx_qc.Rmd", output_format = "pdf_document")
library(rmarkdown)
# Set working directory
setwd("C:/Users/jonat/Desktop/ngs_app_galenvs/server")
# Render Rmd using relative path
rmarkdown::render("pgx_qc.Rmd", output_format = "pdf_document")
library(rmarkdown)
# Set working directory
setwd("C:/Users/jonat/Desktop/ngs_app_galenvs/server/")
# Render Rmd using relative path
rmarkdown::render("pgx_qc.Rmd", output_format = "pdf_document")
